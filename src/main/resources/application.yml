quarkus:
  http:
    host: 0.0.0.0
    port: 8081
    test-port: 8083
    test-ssl-port: 8446

  container-image:
    group: ubitech

  datasource:
    db-kind: postgresql
    jdbc:
      driver: org.postgresql.Driver

  hibernate-orm:
    jdbc:
      timezone: "UTC"
    database:
      generation: validate
    sql-load-script: no-file

  ssl:
    native: false

  # oidc:
  #   auth-server-url:
  #   client-id:
  #   credentials:
  #     secret:

  log:
    console:
      enable: true
      color: true
      format: "%d{HH:mm:ss} %-5p traceId=%X{traceId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n"

  liquibase:
    enabled: true
    migrate-at-start: true
    change-log: src/main/resources/db/changeLog.xml

  banner:
    path: portal-banner.txt

  jackson:
    accept-case-insensitive-enums: true
    timezone: "UTC"

  swagger-ui:
    title: Palantir Portal API

  minio:
    url:
    access-key:
    secret-key:

mp:
  messaging:
    outgoing:
      cmr-requests:
        connector: smallrye-kafka
        topic: cmr.requests
        value:
          serializer: io.quarkus.kafka.client.serialization.ObjectMapperSerializer
    incoming:
      actions-notifications:
        connector: smallrye-kafka
        failure-strategy: ignore
        health-readiness-enabled: false
        topic: actions-notifications
        value:
          deserializer: eu.palantir.portal.kafka.serialization.ActionsNotificationsDeserializer
      incidents-notifications:
        connector: smallrye-kafka
        failure-strategy: ignore
        health-readiness-enabled: false
        topic: incidents-notifications
        value:
          deserializer: eu.palantir.portal.kafka.serialization.IncidentNotificationsDeserializer
      cmr-responses:
        connector: smallrye-kafka
        failure-strategy: ignore
        health-readiness-enabled: false
        topic: cmr.responses
        value:
          deserializer: eu.palantir.portal.kafka.serialization.SMResponsesDeserializer
      ti-threat-findings-netflow:
        connector: smallrye-kafka
        failure-strategy: ignore
        health-readiness-enabled: false
        topic: ti.threat_findings_netflow
        value:
          deserializer: eu.palantir.portal.kafka.serialization.ThreatFindingsNetFlowDeserializer
      ti-threat-findings-syslog:
        connector: smallrye-kafka
        failure-strategy: ignore
        health-readiness-enabled: false
        topic: ti.threat_findings_syslog
        value:
          deserializer: eu.palantir.portal.kafka.serialization.ThreatFindingsSysLogDeserializer
      ti-anomaly-detection:
        connector: smallrye-kafka
        failure-strategy: ignore
        health-readiness-enabled: false
        topic: ti.anomaly_detection
        value:
          deserializer: eu.palantir.portal.kafka.serialization.TIAnomalyDetectionDeserializer
      ir-notify_portal:
        connector: smallrye-kafka
        failure-strategy: ignore
        health-readiness-enabled: false
        topic: ir.notify_portal
        value:
          deserializer: eu.palantir.portal.kafka.serialization.IRNotificationDeserializer
      rs-notify_portal:
        connector: smallrye-kafka
        failure-strategy: ignore
        health-readiness-enabled: false
        topic: rs.notify_portal
        value:
          deserializer: eu.palantir.portal.kafka.serialization.RSNotificationDeserializer

# keycloak:
#   baseurl:
#   realm:
#   admin:
#     username:
#     password:

"%dev":
  quarkus:
    datasource:
      db-kind: postgresql
      jdbc:
        url: org.postgresql.Driver
      metrics:
        enabled: true
    hibernate-orm:
      dialect: org.hibernate.dialect.PostgreSQL95Dialect
      log:
        sql: true
    mailer:
      mock: true
  # domain:

"%test":
  quarkus:
    datasource:
      db-kind: h2
      jdbc:
        url: jdbc:h2:mem:db
    hibernate-orm:
      dialect: org.hibernate.dialect.H2Dialect
      log:
        sql: true
    mailer:
      mock: true

"%prod":
  quarkus:
    package:
      type: uber-jar
    datasource:
      db-kind: postgresql
      jdbc:
        url: org.postgresql.Driver
      metrics:
        enabled: true
    hibernate-orm:
      dialect: org.hibernate.dialect.PostgreSQL95Dialect
      log:
        sql: false
    mailer:
      mock: false
    liquibase:
      contexts: "!fake-data"
    kafka:
      bootstrap:
        servers: kafka:9092
  # domain:
