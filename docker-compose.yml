version: '3.3'

services:

  postgres:
    container_name: "${PROJECT_NAME}_postgres"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    ports:
      - ${DATABASE_PORT}:5432
    image: 'postgres:11.3'
    restart: unless-stopped

  pgadmin:
    container_name: "${PROJECT_NAME}_pgadmin"
    ports:
      - ${PGADMIN_PORT}:5454
    env_file:
      - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${DATABASE_USERNAME}
      - PGADMIN_DEFAULT_PASSWORD=${DATABASE_PASSWORD}
      - PGADMIN_LISTEN_PORT=${PGADMIN_PORT}
    image: 'dpage/pgadmin4:4.22'
    depends_on:
      - postgres
    links:
      - 'postgres:pgsql-server'
    restart: unless-stopped

  postgreskeycloak:
    container_name: "${PROJECT_NAME}_keycloak_postgres"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    env_file:
      - .env
    #    volumes:
    #      - ./profiles/local/01-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    environment:
      - POSTGRES_USER=${KEYCLOAK_DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${KEYCLOAK_DATABASE_PASSWORD}
      - POSTGRES_DB=${KEYCLOAK_DATABASE_NAME}
    ports:
      - ${KEYCLOAK_DATABASE_PORT}:5432
    image: 'postgres:11.3'
    restart: unless-stopped

  keycloak:
    container_name: "${PROJECT_NAME}_keycloak"
    image: quay.io/keycloak/keycloak:10.0.1
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgreskeycloak
      DB_DATABASE: ${KEYCLOAK_DATABASE_NAME}
      DB_USER: ${KEYCLOAK_DATABASE_USERNAME}
      DB_PASSWORD: ${KEYCLOAK_DATABASE_PASSWORD}
      KEYCLOAK_USER: ${KEYCLOAK_ADMIN_USERNAME}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_IMPORT: /tmp/realm.json
    volumes:
      - ./realm/realm.json:/tmp/realm.json
    ports:
      - ${KEYCLOAK_PORT}:8080
    depends_on:
      - postgreskeycloak
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: "${PROJECT_NAME}_minio"
    volumes:
      - miniodata1:/data1
    #      - data1-2:/data2
    ports:
      - "9000:9000"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data1
    #    command: server http://minio{1...3}/data{1...2}
    #    command: server http://minio{1...3}/data{1...2} http://minio{4...5}/data{1...4}
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181 # 22181 for external access

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092 # Only for dev and test
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT # Only for dev and test
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT # Only for dev and test
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

volumes:
  miniodata1:

