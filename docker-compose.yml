version: '3.3'

services:

  postgres:
    container_name: "${PROJECT_NAME}_postgres"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    ports:
      - ${DATABASE_PORT}:5432
    image: 'postgres:11.3'
    restart: unless-stopped

  pgadmin:
    container_name: "${PROJECT_NAME}_pgadmin"
    ports:
      - ${PGADMIN_PORT}:5454
    env_file:
      - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${DATABASE_USERNAME}
      - PGADMIN_DEFAULT_PASSWORD=${DATABASE_PASSWORD}
      - PGADMIN_LISTEN_PORT=${PGADMIN_PORT}
    image: 'dpage/pgadmin4:4.22'
    depends_on:
      - postgres
    links:
      - 'postgres:pgsql-server'
    restart: unless-stopped

  postgreskeycloak:
    container_name: "${PROJECT_NAME}_keycloak_postgres"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    env_file:
      - .env
#    volumes:
#      - ./profiles/local/01-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    environment:
      - POSTGRES_USER=${KEYCLOAK_DATABASE_USERNAME}
      - POSTGRES_PASSWORD=${KEYCLOAK_DATABASE_PASSWORD}
      - POSTGRES_DB=${KEYCLOAK_DATABASE_NAME}
    ports:
      - ${KEYCLOAK_DATABASE_PORT}:5432
    image: 'postgres:11.3'
    restart: unless-stopped

  keycloak:
    container_name: "${PROJECT_NAME}_keycloak"
    image: quay.io/keycloak/keycloak:10.0.1
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgreskeycloak
      DB_DATABASE: ${KEYCLOAK_DATABASE_NAME}
      DB_USER: ${KEYCLOAK_DATABASE_USERNAME}
      DB_PASSWORD: ${KEYCLOAK_DATABASE_PASSWORD}
      KEYCLOAK_USER: ${KEYCLOAK_ADMIN_USERNAME}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_IMPORT: /tmp/realm.json
    volumes:
      - ./realm/realm.json:/tmp/realm.json
    ports:
      - ${KEYCLOAK_PORT}:8080
    depends_on:
      - postgreskeycloak
    restart: unless-stopped

  jaeger:
    container_name: "${PROJECT_NAME}_jaeger"
    profiles: ["monitoring"]
    ports:
      - '5775:5775'
      - '6831:6831'
      - '6832:6832'
      - '5778:5778'
      - '16686:16686'
      - ${JAEGER_PORT}:14268
    image: 'jaegertracing/all-in-one:1.22'
    restart: unless-stopped

#sudo sysctl -w vm.max_map_count=262144 && set ulimit -n 65536
  es01:
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.8.0'
    container_name: "${PROJECT_NAME}_es01"
    restart: unless-stopped
    environment:
      - node.name=${PROJECT_NAME}_es01
      - cluster.name=${PROJECT_NAME}_es-cluster
      # - discovery.seed_hosts=es02
      - cluster.initial_master_nodes=${PROJECT_NAME}_es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
#    volumes:
#      - data01:/usr/share/elasticsearch/data
    ports:
      - ${ELASTIC_PORT}:9200
    networks:
      elastic:
        aliases:
          - ${PROJECT_NAME}_es01
          - elasticsearch

  kib01:
    image: 'docker.elastic.co/kibana/kibana:7.8.0'
    container_name: "${PROJECT_NAME}_kib01"
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      ELASTICSEARCH_URL: http://${PROJECT_NAME}_es01:${ELASTIC_PORT}
      ELASTICSEARCH_HOSTS: http://${PROJECT_NAME}_es01:${ELASTIC_PORT}
    networks:
      - elastic
    depends_on:
      - es01
    restart: unless-stopped

  logstash:
    image: 'docker.elastic.co/logstash/logstash:7.8.0'
    container_name: "${PROJECT_NAME}_logstash"
    restart: unless-stopped
    profiles: ["monitoring"]
    volumes:
      - source: ./pipelines
        target: /usr/share/logstash/pipeline
        type: bind
    ports:
      - ${LOGSTASH_PORT}:12201/udp
      - "5000:5000"
      - "9600:9600"
    networks:
      - elastic
    depends_on:
      - es01

  minio:
    image: minio/minio:latest
    container_name: "${PROJECT_NAME}_minio"
    volumes:
      - miniodata1:/data1
#      - data1-2:/data2
    ports:
      - "9000:9000"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data1
#    command: server http://minio{1...3}/data{1...2}
#    command: server http://minio{1...3}/data{1...2} http://minio{4...5}/data{1...4}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

volumes:
  miniodata1:

networks:
  elastic:
    driver: bridge
